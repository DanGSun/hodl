import json
from socket import socket
import random
import cryptogr as cg


class Peer:
    """
    Class for one peer.
    """
    def __init__(self, addr, ip, port):
        self.addr = addr
        self.netaddr = (ip, port)

    def is_white(self, myaddrs):
        """
        Checks
        myaddrs is list of this computer's addresses:
        [[private key1, public key1], ...]
        :param myaddrs: list
        :return: is_valid: bool
        """
        sock = socket()
        try:
            sock.connect(self.netaddr)
            mess = {'request': ['peercheck', random.randint(0, 10000)]}
            mess['pubkeys'] = [[addr[1], cg.sign(json.dumps(mess), addr[0])] for addr in myaddrs]
            sock.send(json.dumps(mess).encode())
            sock.listen(1)
            conn = sock.accept()[0]
            data = b''
            while True:
                p = conn.recv(1024)
                data += p
                if not p:
                    break
            h = cg.h(data.decode('utf-8'))
            data = json.loads(data.decode('utf-8'))
            pubkeys = data['pubkeys']
            for pubkey, sign in pubkeys:
                if not cg.verify_sign(sign, h, pubkey):
                    pubkeys.remove([pubkey, sign])
            if self.addr in pubkeys:
                return True
            return False
        except:
            return False

    def __str__(self):
        return json.dumps([self.addr, self.netaddr])

    @classmethod
    def from_json(cls, s):
        """
        Restore peer from json string generated by str(peer)
        :param s: str
        :return: Peer
        """
        s = json.loads(s)
        self = cls(s[0], s[1][0], s[1][1])
        return self


class Peers(set):
    """
    Class for storing peers.
    It is a set of peers(class Peer)
    """
    def save(self, file):
        """
        Save peers to file
        :param file: str
        :return:
        """
        with open(file, 'w') as f:
            f.write(json.dumps([json.dumps(peer) for peer in list(self)]))

    @classmethod
    def open(cls, file):
        """
        Restore peers from file
        :param file: str
        :return:
        """
        self = cls()
        with open(file, 'r') as f:
            for peer in json.loads(f.read()):
                self.add(Peer.from_json(peer))
        return self

    def srchbyaddr(self, addr):
        """
        Search peer in self.
        addr is peer's public key.
        :param addr: str
        :return:
        """
        for p in self:
            if p.addr == addr:
                return p
        return False
